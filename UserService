package com.example.auth.service;

import com.example.auth.dto.*;
import com.example.auth.model.UserEntity;
import com.example.auth.repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import java.util.Optional;

@Service
public class UserService {

    private final UserRepository userRepo;
    private final PasswordEncoder encoder;
    private final JwtService jwtService;

    public UserService(UserRepository repo, PasswordEncoder encoder, JwtService jwtService) {
        this.userRepo = repo;
        this.encoder = encoder;
        this.jwtService = jwtService;
    }

    public AuthResponse signup(SignupRequest req) {
        UserEntity user = new UserEntity(null, req.getUsername(), req.getEmail(), encoder.encode(req.getPassword()));
        userRepo.save(user);
        String token = jwtService.generateToken(req.getEmail());
        return new AuthResponse(token);
    }

    public AuthResponse login(LoginRequest req) {
        Optional<UserEntity> user = userRepo.findByEmail(req.getEmail());
        if (user.isPresent() && encoder.matches(req.getPassword(), user.get().getPassword())) {
            return new AuthResponse(jwtService.generateToken(req.getEmail()));
        }
        throw new RuntimeException("Invalid credentials");
    }
}
